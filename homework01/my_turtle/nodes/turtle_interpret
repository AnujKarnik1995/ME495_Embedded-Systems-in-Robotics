#!/usr/bin/env python3
"""
This node translates a custom velocity message into a Twist which can be used by turtlesim.

Publishers:
/rosout (rosgraph_maga/Log)
/turtle1/cmd_vel (geometry_msgs/Twist)

Subscribers:
/turtle_vel (TurtleVel)

Services:
/vel_translate 

"""
import rospy
from geometry_msgs.msg import Twist, Vector3
from std_msgs.msg import String
from my_turtle.msg import TurtleVel
from my_turtle.srv import VelTranslate

def velocity_tlate(delta):
    """ Coverts the twist 
    Args:
    Twist (6 vector)

    Returns:
    A twist in the form of a velocity vector
    """
    vel = TurtleVel() #class to contain the velocity parameters
    vel.lin = msg.all_in_one.linear.x   #xdot 
    vel.ang = msg.all_in_one.angular.z  #omega: angular velocity about z axis

    #'None' case:
    if(delta.all_in_one.linear.y != 0 or delta.all_in_one.linear.z != 0 or delta.all_in_one.angular.y != 0 or delta.all_in_one.angular.x != 0):
        return None
    
    else:
        return vel_translate_output(vel)

class Trial1:
    """
    Subscribes to turtle_vel and publishes to cmd_vel.
    Offers the service to convert geometry.msg into a twist.
    """
    def __init__(self):

        #Node subscribes to turtle_vel listening for TurtleVel messages
        self.sub = rospy.Subscriber('turtle_vel', TurtleVel, self.vel_ret)
        #Node publised to cmd_vel
        self.pub = rospy.Publisher('turtle1/cmd_vel', Twist, queue_size = 10)
        self.srvc = rospy.Service('vel_translate', VelTranslate, velocity_tlate)

    def vel_ret(self, data):
        #defining data for debugging:
        all_in_one = Twist(linear = Vector3(x=data.linear, y=0.0, z=0.0), angular = Vector3(x=0.0, y=0.0, z=data.angular))

        #To log input; NEED TO CONFIRM IF args Lin, ang are correct
        self.log = rospy.logdebug('Debug values: %f %f', data.linear, data.angular)
        
        self.pub.publish(all_in_one)
        
def main():
    "the main function"

    rospy.init_node('turtle_interpret')  #initializing this program as a ROS node, called turtle_interpret
    mynode = Trial1()
    rospy.spin()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass
